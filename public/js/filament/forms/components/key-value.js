// packages/forms/resources/js/components/key-value.js
function keyValueFormComponent({ state }) {
  return {
    state,
    rows: [],
    shouldUpdateRows: true,
    init: function() {
      this.updateRows();
      if (this.rows.length <= 0) {
        this.addRow();
      }
      this.updateState();
      this.$watch("state", (state2, oldState) => {
        const getLength = (value) => {
          if (value === null) {
            return 0;
          }
          if (Array.isArray(value)) {
            return value.length;
          }
          if (typeof value !== "object") {
            return 0;
          }
          return Object.keys(value).length;
        };
        if (getLength(state2) === 0 && getLength(oldState) === 0) {
          return;
        }
        this.updateRows();
      });
    },
    addRow: function() {
      this.rows.push({ key: "", value: "" });
      this.updateState();
    },
    deleteRow: function(index) {
      this.rows.splice(index, 1);
      if (this.rows.length <= 0) {
        this.addRow();
      }
      this.updateState();
    },
    reorderRows: function(event) {
      const rows = Alpine.raw(this.rows);
      const reorderedRow = rows.splice(event.oldIndex, 1)[0];
      rows.splice(event.newIndex, 0, reorderedRow);
      this.rows = rows;
      this.updateState();
    },
    updateRows: function() {
      if (!this.shouldUpdateRows) {
        this.shouldUpdateRows = true;
        return;
      }
      let rows = [];
      for (let [key, value] of Object.entries(this.state ?? {})) {
        rows.push({
          key,
          value
        });
      }
      this.rows = rows;
    },
    updateState: function() {
      let state2 = {};
      this.rows.forEach((row) => {
        if (row.key === "" || row.key === null) {
          return;
        }
        state2[row.key] = row.value;
      });
      this.shouldUpdateRows = false;
      this.state = state2;
    }
  };
}
export {
  keyValueFormComponent as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMva2V5LXZhbHVlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXlWYWx1ZUZvcm1Db21wb25lbnQoeyBzdGF0ZSB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGUsXG5cbiAgICAgICAgcm93czogW10sXG5cbiAgICAgICAgc2hvdWxkVXBkYXRlUm93czogdHJ1ZSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJvd3MoKVxuXG4gICAgICAgICAgICBpZiAodGhpcy5yb3dzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRSb3coKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKClcblxuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ3N0YXRlJywgKHN0YXRlLCBvbGRTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdldExlbmd0aCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGhcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2V0TGVuZ3RoKHN0YXRlKSA9PT0gMCAmJiBnZXRMZW5ndGgob2xkU3RhdGUpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUm93cygpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuXG4gICAgICAgIGFkZFJvdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yb3dzLnB1c2goeyBrZXk6ICcnLCB2YWx1ZTogJycgfSlcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlUm93OiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMucm93cy5zcGxpY2UoaW5kZXgsIDEpXG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJvd3MubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFJvdygpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlb3JkZXJSb3dzOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvd3MgPSBBbHBpbmUucmF3KHRoaXMucm93cylcblxuICAgICAgICAgICAgY29uc3QgcmVvcmRlcmVkUm93ID0gcm93cy5zcGxpY2UoZXZlbnQub2xkSW5kZXgsIDEpWzBdXG4gICAgICAgICAgICByb3dzLnNwbGljZShldmVudC5uZXdJbmRleCwgMCwgcmVvcmRlcmVkUm93KVxuXG4gICAgICAgICAgICB0aGlzLnJvd3MgPSByb3dzXG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKVxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZVJvd3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zaG91bGRVcGRhdGVSb3dzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRVcGRhdGVSb3dzID0gdHJ1ZVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByb3dzID0gW11cblxuICAgICAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc3RhdGUgPz8ge30pKSB7XG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJvd3MgPSByb3dzXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IHt9XG5cbiAgICAgICAgICAgIHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocm93LmtleSA9PT0gJycgfHwgcm93LmtleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdGF0ZVtyb3cua2V5XSA9IHJvdy52YWx1ZVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gcHJldmVudCB0aGUgY29tcG9uZW50IGZyb20gdXBkYXRpbmcgcm93cyBhZ2FpblxuICAgICAgICAgICAgLy8gYWZ0ZXIgYSBzdGF0ZSB1cGRhdGUsIHdoaWNoIHdvdWxkIG90aGVyd2lzZSBiZSBkb25lIGJ5IHRoZSBgc3RhdGVgXG4gICAgICAgICAgICAvLyB3YXRjaGVyLiBJZiByb3dzIGFyZSB1cGRhdGVkIGFnYWluLCBkdXBsaWNhdGUga2V5cyBhcmUgcmVtb3ZlZC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmlsYW1lbnRwaHAvZmlsYW1lbnQvaXNzdWVzLzExMDdcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlUm93cyA9IGZhbHNlXG5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZVxuICAgICAgICB9LFxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLHNCQUF1QyxFQUFFLE1BQU0sR0FBRztBQUNyRCxTQUFPO0FBQUEsSUFDSDtBQUFBLElBRUEsTUFBTSxDQUFDO0FBQUEsSUFFUCxrQkFBa0I7QUFBQSxJQUVsQixNQUFNLFdBQVk7QUFDZCxXQUFLLFdBQVc7QUFFaEIsVUFBSSxLQUFLLEtBQUssVUFBVSxHQUFHO0FBQ3ZCLGFBQUssT0FBTztBQUFBLE1BQ2hCO0FBRUEsV0FBSyxZQUFZO0FBRWpCLFdBQUssT0FBTyxTQUFTLENBQUNBLFFBQU8sYUFBYTtBQUN0QyxjQUFNLFlBQVksQ0FBQyxVQUFVO0FBQ3pCLGNBQUksVUFBVSxNQUFNO0FBQ2hCLG1CQUFPO0FBQUEsVUFDWDtBQUVBLGNBQUksTUFBTSxRQUFRLEtBQUssR0FBRztBQUN0QixtQkFBTyxNQUFNO0FBQUEsVUFDakI7QUFFQSxjQUFJLE9BQU8sVUFBVSxVQUFVO0FBQzNCLG1CQUFPO0FBQUEsVUFDWDtBQUVBLGlCQUFPLE9BQU8sS0FBSyxLQUFLLEVBQUU7QUFBQSxRQUM5QjtBQUVBLFlBQUksVUFBVUEsTUFBSyxNQUFNLEtBQUssVUFBVSxRQUFRLE1BQU0sR0FBRztBQUNyRDtBQUFBLFFBQ0o7QUFFQSxhQUFLLFdBQVc7QUFBQSxNQUNwQixDQUFDO0FBQUEsSUFDTDtBQUFBLElBRUEsUUFBUSxXQUFZO0FBQ2hCLFdBQUssS0FBSyxLQUFLLEVBQUUsS0FBSyxJQUFJLE9BQU8sR0FBRyxDQUFDO0FBRXJDLFdBQUssWUFBWTtBQUFBLElBQ3JCO0FBQUEsSUFFQSxXQUFXLFNBQVUsT0FBTztBQUN4QixXQUFLLEtBQUssT0FBTyxPQUFPLENBQUM7QUFFekIsVUFBSSxLQUFLLEtBQUssVUFBVSxHQUFHO0FBQ3ZCLGFBQUssT0FBTztBQUFBLE1BQ2hCO0FBRUEsV0FBSyxZQUFZO0FBQUEsSUFDckI7QUFBQSxJQUVBLGFBQWEsU0FBVSxPQUFPO0FBQzFCLFlBQU0sT0FBTyxPQUFPLElBQUksS0FBSyxJQUFJO0FBRWpDLFlBQU0sZUFBZSxLQUFLLE9BQU8sTUFBTSxVQUFVLENBQUMsRUFBRSxDQUFDO0FBQ3JELFdBQUssT0FBTyxNQUFNLFVBQVUsR0FBRyxZQUFZO0FBRTNDLFdBQUssT0FBTztBQUVaLFdBQUssWUFBWTtBQUFBLElBQ3JCO0FBQUEsSUFFQSxZQUFZLFdBQVk7QUFDcEIsVUFBSSxDQUFDLEtBQUssa0JBQWtCO0FBQ3hCLGFBQUssbUJBQW1CO0FBRXhCO0FBQUEsTUFDSjtBQUVBLFVBQUksT0FBTyxDQUFDO0FBRVosZUFBUyxDQUFDLEtBQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLEdBQUc7QUFDdkQsYUFBSyxLQUFLO0FBQUEsVUFDTjtBQUFBLFVBQ0E7QUFBQSxRQUNKLENBQUM7QUFBQSxNQUNMO0FBRUEsV0FBSyxPQUFPO0FBQUEsSUFDaEI7QUFBQSxJQUVBLGFBQWEsV0FBWTtBQUNyQixVQUFJQSxTQUFRLENBQUM7QUFFYixXQUFLLEtBQUssUUFBUSxDQUFDLFFBQVE7QUFDdkIsWUFBSSxJQUFJLFFBQVEsTUFBTSxJQUFJLFFBQVEsTUFBTTtBQUNwQztBQUFBLFFBQ0o7QUFFQSxRQUFBQSxPQUFNLElBQUksR0FBRyxJQUFJLElBQUk7QUFBQSxNQUN6QixDQUFDO0FBT0QsV0FBSyxtQkFBbUI7QUFFeEIsV0FBSyxRQUFRQTtBQUFBLElBQ2pCO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogWyJzdGF0ZSJdCn0K
